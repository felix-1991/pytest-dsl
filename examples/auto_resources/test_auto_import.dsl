@name: "自动导入resources目录测试"
@description: "演示自动导入resources目录中的自定义关键字功能"
@author: "pytest-dsl团队"
@date: "2024-01-15"

# 注意：这里没有使用@import指令，但可以直接使用resources目录中定义的关键字
# 因为系统会自动导入resources目录中的所有.resource文件

[打印], 内容: "开始测试自动导入功能"

# 使用来自 resources/common/utils.resource 的关键字
测试数据 = "  Hello World  "
清理后的数据 = [清理字符串], 输入字符串: ${测试数据}

# 使用格式化消息关键字
格式化结果 = [格式化消息], 模板: "清理结果", 变量值: ${清理后的数据}
[打印], 内容: ${格式化结果}

# 使用验证关键字
用户名 = "testuser"
验证结果 = [验证非空], 值: ${用户名}, 字段名: "用户名"
[打印], 内容: "用户名验证结果: ${验证结果}"

# 验证邮箱格式
邮箱地址 = "test@example.com"
邮箱验证结果 = [验证邮箱格式], 邮箱地址: ${邮箱地址}
[打印], 内容: "邮箱验证结果: ${邮箱验证结果}"

# 测试简单计算关键字
计算结果1 = [简单计算], 数字1: 10, 数字2: 5, 操作: "加法"
计算结果2 = [简单计算], 数字1: 10, 数字2: 3, 操作: "乘法"
[打印], 内容: "计算结果1: ${计算结果1}"
[打印], 内容: "计算结果2: ${计算结果2}"

# 使用安全等待关键字
[安全等待], 秒数: 2, 描述: "测试等待功能"

# 使用来自 resources/api/http_utils.resource 的关键字
# 这个文件依赖于 utils.resource，测试依赖关系是否正确处理
登录结果 = [登录获取Token], 用户名: "testuser", 密码: "testpass"
[打印], 内容: "登录结果: ${登录结果}"

# 使用获取到的token进行API调用（注意：现在返回的是简单字符串，不是字典）
token = ${登录结果}
API调用结果 = [带认证的API调用], 方法: "GET", 路径: "/api/users", token: ${token}
[打印], 内容: "API调用结果: ${API调用结果}"

# 创建资源测试
创建结果 = [创建资源], 资源类型: "users", 数据: "用户数据", token: ${token}
[打印], 内容: "创建资源结果: ${创建结果}"

# 获取资源测试
获取结果 = [获取资源], 资源类型: "users", 资源ID: "123", token: ${token}
[打印], 内容: "获取资源结果: ${获取结果}"

# 使用来自 resources/simple/test_utils.resource 的关键字
测试数据1 = [生成测试数据], 数据类型: "用户", 数量: 3
测试数据2 = [生成测试数据], 数据类型: "订单"
[打印], 内容: "生成的测试数据1: ${测试数据1}"
[打印], 内容: "生成的测试数据2: ${测试数据2}"

# 验证测试结果
验证结果1 = [验证测试结果], 实际值: "成功", 预期值: "成功", 测试名称: "登录测试"
验证结果2 = [验证测试结果], 实际值: "失败", 预期值: "成功", 测试名称: "错误测试"
[打印], 内容: "验证结果1: ${验证结果1}"
[打印], 内容: "验证结果2: ${验证结果2}"

[打印], 内容: "自动导入功能测试完成！"

teardown do
    [打印], 内容: "清理测试环境"
    清理结果 = [清理测试环境], 环境类型: "自动导入测试"
    [打印], 内容: "清理结果: ${清理结果}"
end 